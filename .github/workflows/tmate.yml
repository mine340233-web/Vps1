name: Create VPS

on:
  workflow_dispatch:          # ✅ Manual "Run workflow" button
  repository_dispatch:        # ✅ Can still be triggered by API or other workflows
    types: [create-vps]

jobs:
  start-vps:
    runs-on: ubuntu-latest
    timeout-minutes: 360  # 6 hours max

    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v3

      - name: 📁 Create dirs
        run: mkdir -p links .backup

      - name: 💾 Restore backup
        run: |
          name="${{ github.event.client_payload.vps_name }}"
          if [ "${{ github.event.client_payload.backup }}" == "true" ]; then
            echo "📦 Restoring backup..."
            unzip ".backup/$name.zip" -d . || echo "⚠️ No backup to restore."
          fi

      - name: 🔐 Start tmate session
        run: |
          echo "⚙️ Launching tmate..."
          sudo apt update && sudo apt install -y tmate
          tmate -S /tmp/tmate.sock new-session -d
          tmate -S /tmp/tmate.sock wait tmate-ready
          SSH=$(tmate -S /tmp/tmate.sock display -p '#{tmate_ssh}')
          echo "$SSH" > "links/${{ github.event.client_payload.vps_name || 'manual-vps' }}.txt"
          echo "✅ SSH Ready: $SSH"
          sleep 60  # give time for GitHub to sync

      - name: 📦 Save backup
        run: |
          name="${{ github.event.client_payload.vps_name || 'manual-vps' }}"
          zip -r ".backup/$name.zip" . -x ".git/*" ".github/*" ".backup/*" || true

      - name: 📤 Push
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "🔁 Updated SSH + backup for ${{ github.event.client_payload.vps_name || 'manual-vps' }}"
          file_pattern: 'links/*.txt .backup/*.zip'

      - name: ⏳ Keep session alive
        run: |
          echo "⏳ Keeping session alive for 6 hours..."
          sleep $((360 * 60))


2 .github/workflows/tmate.yml

3
name: Auto Start VPS on Push

on:
  push:
    branches: [main]

jobs:
  dispatch:
    runs-on: ubuntu-latest
    steps:
      - name: 📡 Trigger tmate.yml
        run: |
          curl -X POST https://api.github.com/repos/BiratPaudel10/Biralomain/dispatches \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d '{"event_type": "create-vps", "client_payload": {"vps_name": "autovps", "backup": false}}'

4 auto-start.yml

5 #!/bin/bash

BACKUP_NAME="vps_backup.tar.gz"
BACKUP_URL="https://transfer.sh/vps_backup.tar.gz"

function restore_backup() {
  echo "🔄 Restoring backup..."
  curl -s --fail $BACKUP_URL -o $BACKUP_NAME || {
    echo "No previous backup found, starting fresh."
    return 1
  }
  tar -xzf $BACKUP_NAME || {
    echo "Failed to extract backup."
    return 1
  }
  echo "✅ Backup restored."
}

function backup_and_upload() {
  echo "💾 Creating backup and uploading..."
  # Change these folders to whatever you want backed up
  tar czf $BACKUP_NAME ./data ./scripts ./configs 2>/dev/null || {
    echo "Nothing to backup or folders do not exist."
    return 1
  }
  UPLOAD_LINK=$(curl --upload-file $BACKUP_NAME https://transfer.sh/$BACKUP_NAME)
  echo "🆙 Backup uploaded: $UPLOAD_LINK"
  echo $UPLOAD_LINK > last_backup_url.txt
}

# Accept argument: restore_backup or backup_and_upload
if [ "$1" == "restore_backup" ]; then
  restore_backup
elif [ "$1" == "backup_and_upload" ]; then
  backup_and_upload
else
  echo "Usage: $0 [restore_backup|backup_and_upload]"
fi

6 backup-restore.sh
